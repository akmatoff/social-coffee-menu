---
import { Image } from "astro:assets";
import type { Category } from "../../types";
import CategoryButton from "./CategoryButton.astro";
import HomeIcon from "../../assets/home-icon.svg";

interface Props {
  categories: Category[];
}

const { categories } = Astro.props;
---

<div
  class="flex items-center sticky top-0 z-30 bg-secondary"
  id="category-carousel"
>
  <div
    id="category-scroll"
    class="flex overflow-x-auto overflow-y-hidden p-3 lg:p-4 gap-x-4 gap-y-2 w-full scrollbar-hidden"
  >
    {
      categories.map((category) => (
        <CategoryButton
          link={`#category-${category.id}`}
          className="border-white text-white"
        >
          {category.name}
        </CategoryButton>
      ))
    }
  </div>
  <!-- <button id="scrollToTop" class="px-4 p-3 lg:p-4">
    <Image src={HomeIcon} alt="icon" />
  </button> -->
</div>

<script is:inline>
  if (typeof window !== "undefined") {
    const el = document.getElementById("category-scroll");

    if (el) {
      el.addEventListener(
        "wheel",
        (e) => {
          if (e.deltaY !== 0) {
            e.preventDefault();
            el.scrollLeft += e.deltaY;
          }
        },
        { passive: false }
      );
    }
  }
</script>

<!-- <script is:inline>
  const scrollToTopButton = document.querySelector("#scrollToTop");
  scrollToTopButton?.classList.add("hidden");

  function toggleScrollButton() {
    if (window.scrollY > 800) {
      scrollToTopButton?.classList.remove("hidden");
    } else {
      scrollToTopButton?.classList.add("hidden");
    }
  }

  window.addEventListener("scroll", toggleScrollButton);

  scrollToTopButton?.addEventListener("click", () => {
    window.scrollTo({ top: 0, behavior: "smooth" });

    window.location.hash = "";
  });
</script> -->

<script is:inline>
  const categoryBar = document.getElementById("category-carousel");
  const header = document.getElementById("header-section");

  const observer = new IntersectionObserver(
    ([entry]) => {
      if (!entry.isIntersecting) {
        categoryBar?.classList.remove("hidden");
      } else {
        categoryBar?.classList.add("hidden");
      }
    },
    {
      root: null,
      threshold: 0,
    }
  );

  if (header) {
    observer.observe(header);
  }
</script>
